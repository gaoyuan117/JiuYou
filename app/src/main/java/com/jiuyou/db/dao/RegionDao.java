package com.jiuyou.db.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.jiuyou.db.model.Region;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table REGION.
*/
public class RegionDao extends AbstractDao<Region, Long> {

    public static final String TABLENAME = "REGION";

    /**
     * Properties of entity Region.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property FirstChar = new Property(3, String.class, "firstChar", false, "FIRST_CHAR");
        public final static Property Level = new Property(4, Integer.class, "level", false, "LEVEL");
        public final static Property ParentCode = new Property(5, String.class, "parentCode", false, "PARENT_CODE");
        public final static Property IsHot = new Property(6, Integer.class, "isHot", false, "IS_HOT");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
    };


    public RegionDao(DaoConfig config) {
        super(config);
    }
    
    public RegionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'REGION' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'CODE' TEXT NOT NULL ," + // 1: code
                "'NAME' TEXT NOT NULL ," + // 2: name
                "'FIRST_CHAR' TEXT NOT NULL ," + // 3: firstChar
                "'LEVEL' INTEGER," + // 4: level
                "'PARENT_CODE' TEXT," + // 5: parentCode
                "'IS_HOT' INTEGER," + // 6: isHot
                "'STATUS' INTEGER);"); // 7: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'REGION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Region entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCode());
        stmt.bindString(3, entity.getName());
        stmt.bindString(4, entity.getFirstChar());
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(5, level);
        }
 
        String parentCode = entity.getParentCode();
        if (parentCode != null) {
            stmt.bindString(6, parentCode);
        }
 
        Integer isHot = entity.getIsHot();
        if (isHot != null) {
            stmt.bindLong(7, isHot);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Region readEntity(Cursor cursor, int offset) {
        Region entity = new Region( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // code
            cursor.getString(offset + 2), // name
            cursor.getString(offset + 3), // firstChar
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // parentCode
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isHot
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Region entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setFirstChar(cursor.getString(offset + 3));
        entity.setLevel(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setParentCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsHot(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Region entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Region entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    public void insertAllRegion(SQLiteDatabase db,List <Region>list){
    	
    	String sql = "insert into region (code,name,firstChar,level,parentCode,isHot,status)values(?,?,?,?,?,?,?)";
    	SQLiteStatement statment = db.compileStatement(sql);
		db.beginTransaction();
		for (Region re : list) {
			statment.bindString(1, re.getCode());
			statment.bindString(2, re.getName());
			statment.bindString(3, re.getFirstChar());
			statment.bindLong(4, re.getLevel());
			statment.bindString(5, re.getParentCode());
			statment.bindLong(6, re.getIsHot());
			statment.bindLong(7, re.getStatus());
			statment.executeInsert();
		}
        db.setTransactionSuccessful();
		db.endTransaction();
    }
    //删除数据
  	public void delteAllByRegion(SQLiteDatabase db) {

  		String sql = "delete from region";
  		db.beginTransaction();
  		db.execSQL(sql);
        db.setTransactionSuccessful();
  		db.endTransaction();
  		
  	}
}
